generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model attribute_name {
  id             Int        @id
  attribute_id   Int
  attribute_name String     @db.VarChar(50)
  attributes     attributes @relation(fields: [attribute_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_attribute_id")
}

model attributes {
  id                 Int                  @id
  name               String               @db.VarChar(100)
  attribute_name     attribute_name[]
  product_attributes product_attributes[]
}

model cart {
  id            Int             @id
  cart_products cart_products[]
  users         users[]
}

model cart_products {
  id         Int      @id
  cart_id    Int
  product_id Int
  cart       cart     @relation(fields: [cart_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "product_cart_id")
  products   products @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "to_product_id")
}

model categories {
  id                 Int                  @id
  name               String               @db.VarChar(100)
  description        String?
  image_id           Int?
  images             images?              @relation(fields: [image_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "category_image_id")
  product_categories product_categories[]
}

model images {
  id         Int          @id
  name       String       @db.VarChar(255)
  alt        String?
  categories categories[]
  employees  employees[]
  products   products[]
  users      users[]
}

model order_details {
  id         Int       @id
  order_id   Int?
  product_id Int?
  unit_price Float     @db.Real
  quantity   Int       @default(0) @db.SmallInt
  discount   Float?    @db.Real
  orders     orders?   @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "details_order_id")
  products   products? @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "details_product_id")
}

model orders {
  id             Int             @id
  user_id        Int
  order_date     DateTime        @default(now()) @db.Timestamp(6)
  shopped_date   DateTime?       @db.Timestamp(6)
  delivered_date DateTime?       @db.Timestamp(6)
  ship_adress    String          @db.VarChar(255)
  ship_city      String?         @db.VarChar(80)
  order_status   Int?
  order_details  order_details[]
}

model product_attributes {
  id           Int        @id
  product_id   Int
  attribute_id Int
  attributes   attributes @relation(fields: [attribute_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_attribute_id")
  products     products   @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_id")
}

model product_categories {
  id          Int        @id
  product_id  Int
  category_id Int
  categories  categories @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_category_id")
  products    products   @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_id")
}

model product_comments {
  id         Int      @id
  text       String
  product_id Int
  user_id    Int
  products   products @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_id")
  users      users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id")
}

model product_defects {
  id          Int       @id
  count       Int       @db.SmallInt
  product_id  Int
  supply_id   Int
  supplier_id Int
  products    products  @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_id")
  suppliers   suppliers @relation(fields: [supplier_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_supplier_id")
  supply      supply    @relation(fields: [supply_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_supply_id")
}

model products {
  id                 Int                  @id
  product_name       String               @db.VarChar(255)
  price              Float                @db.Real
  old_price          Float?               @db.Real
  images_id          Int?
  stock              Int                  @default(0) @db.SmallInt
  discontinued       Boolean?             @default(false)
  deleted            Boolean?             @default(false)
  images             images?              @relation(fields: [images_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "product_image_id")
  cart_products      cart_products[]
  order_details      order_details[]
  product_attributes product_attributes[]
  product_categories product_categories[]
  product_comments   product_comments[]
  product_defects    product_defects[]
  ratings            ratings[]
  supply             supply[]
}

model ratings {
  id         Int      @id
  product_id Int
  user_id    Int
  products   products @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_id")
  users      users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id")
}

model roles {
  id          Int     @id
  permissions String  @db.VarChar(15)
  users       users[]
}

model suppliers {
  id              Int               @id
  company_name    String            @db.VarChar(40)
  contact_name    String            @db.VarChar(40)
  adress          String            @db.VarChar(255)
  phone           String            @db.VarChar(15)
  product_defects product_defects[]
  supply          supply[]
}

model supply {
  id              Int               @id
  product_id      Int
  supplier_id     Int
  product_count   Int               @db.SmallInt
  product_price   Float             @db.Real
  supply_date     DateTime          @default(now()) @db.Timestamp(6)
  products        products          @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_id")
  suppliers       suppliers         @relation(fields: [supplier_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_supplier_id")
  product_defects product_defects[]
}

model users {
  id                   Int                @id
  name                 String             @db.VarChar(100)
  phone                String             @db.VarChar(15)
  email                String             @unique @db.VarChar(30)
  password_hash        String
  city                 String?            @db.VarChar(100)
  adress               String?            @db.VarChar(255)
  created_at           DateTime?          @default(now()) @db.Timestamp(6)
  updated_at           DateTime?          @db.Timestamp(6)
  reset_password_token String?
  cart_id              Int?
  avatar               Int?
  role_id              Int                @default(0)
  images               images?            @relation(fields: [avatar], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_image_id")
  cart                 cart?              @relation(fields: [cart_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_cart_id")
  roles                roles              @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_role_id")
  product_comments     product_comments[]
  ratings              ratings[]
}

model employees {
  id         Int       @id @db.SmallInt
  name       String    @db.VarChar(40)
  last_name  String    @db.VarChar(70)
  title      String?   @db.VarChar(255)
  birth_date DateTime? @db.Date
  hire_date  DateTime? @db.Date
  adress     String    @db.VarChar(150)
  phone      String    @db.VarChar(40)
  notes      String?
  region_id  Int       @default(0) @db.SmallInt
  image_id   Int?
  images     images?   @relation(fields: [image_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_image_id")
  region     region    @relation(fields: [region_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_region_id")
}

model region {
  id        Int         @id @db.SmallInt
  name      String      @db.VarChar(50)
  employees employees[]
}

model shippers {
  id    Int    @id @db.SmallInt
  name  String @db.VarChar(50)
  phone String @db.VarChar(30)
}
